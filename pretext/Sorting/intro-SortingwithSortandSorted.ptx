<?xml version="1.0"?>
<section xml:id="sorting_introduction-sorting-with-sort-and-sorted">
  <title>Introduction: Sorting with Sort and Sorted</title>
  <p>When we first introduced lists, we noted the existence of a method sort. When invoked on a list, the
            order of items in the list is changed. If no optional parameters are specified, the items are arranged in
            whatever the natural ordering is for the item type. For example, if the items are all integers, then
            smaller numbers go earlier in the list. If the items are all strings, they are arranged in alphabetic order.</p>
  <program xml:id="ac18_1_1" interactive="activecode" language="python">
    <input>
L1 = [1, 7, 4, -2, 3]
L2 = ["Cherry", "Apple", "Blueberry"]

L1.sort()
print(L1)
L2.sort()
print(L2)
        </input>
  </program>
  <p>Note that the sort method does <term>not</term> return a sorted version of the list. In fact, it
            returns the value None. But the list itself has been modified. This kind of operation
            that works by having a <em>side effect</em> on the list can be quite confusing.</p>
  <p>In this course, we will generally use an alternative way of sorting, the function <c>sorted</c> rather than
            the method <c>sort</c>. Because it is a function rather than a method, it is invoked on a list by passing the
            list as a parameter inside the parentheses, rather than putting the list before the period. More importantly,
            <c>sorted</c> does not change the original list. Instead, it returns a new list.</p>
  <program xml:id="ac18_1_2" interactive="activecode" language="python">
    <input>
L2 = ["Cherry", "Apple", "Blueberry"]

L3 = sorted(L2)
print(L3)
print(sorted(L2))
print(L2) # unchanged

print("----")

L2.sort()
print(L2)
print(L2.sort())  #return value is None
        </input>
  </program>
</section>
