<?xml version="1.0"?>
<section xml:id="functions_glossary">
  <title>Glossary</title>
  <glossary sorted="False">
    <gi>
      <title>argument</title>
      <p>A value provided to a function when the function is called. This value
                            is assigned to the corresponding parameter in the function. The argument
                            can be the result of an expression which may involve operators,
                            operands and calls to other fruitful functions.</p>
    </gi>
    <gi>
      <title>body</title>
      <p>The second part of a compound statement. The body consists of a
                            sequence of statements all indented the same amount from the beginning
                            of the header. The standard amount of indentation used within the
                            Python community is 4 spaces.</p>
    </gi>
    <gi>
      <title>calling stack</title>
      <p>A sequence (stack) of frames, showing all the function calls that are in process
                            but not yet complete. When one function's code invokes another function call,
                            there will be more than one frame on the stack.</p>
    </gi>
    <gi>
      <title>compound statement</title>
      <p>A statement that consists of two parts:</p>
      <p>
        <ol label="1">
          <li>
            <p>header - which begins with a keyword determining the statement
                                    type, and ends with a colon.</p>
          </li>
          <li>
            <p>body - containing one or more statements indented the same amount
                                    from the header.</p>
          </li>
        </ol>
      </p>
      <p>The syntax of a compound statement looks like this:</p>
      <program language="python">
        <input>
keyword expression:
    statement
    statement
    ...
</input>
      </program>
    </gi>
    <gi>
      <title>docstring</title>
      <p>If the first thing in a function body is a string (or, we'll see later, in other situations
                            too) that is attached to the function as its <c>__doc__</c> attribute.</p>
    </gi>
    <gi>
      <title>flow of execution</title>
      <p>The order in which statements are executed during a program run.</p>
    </gi>
    <gi>
      <title>function</title>
      <p>A named sequence of statements that performs some useful operation.
                            Functions may or may not take parameters and may or may not produce a
                            result.</p>
    </gi>
    <gi>
      <title>function call</title>
      <p>A statement that executes a function. It consists of the name of the
                            function followed by a list of arguments enclosed in parentheses.</p>
    </gi>
    <gi>
      <title>function composition</title>
      <p>Using the output from one function call as the input to another.</p>
    </gi>
    <gi>
      <title>function definition</title>
      <p>A statement that creates a new function, specifying its name,
                            parameters, and the statements it executes.</p>
    </gi>
    <gi>
      <title>fruitful function</title>
      <p>A function that returns a value when it is called.</p>
    </gi>
    <gi>
      <title>global variable</title>
      <p>A variable defined at the top level, not inside any function.</p>
    </gi>
    <gi>
      <title>header line</title>
      <p>The first part of a compound statement. A header line begins with a keyword and
                            ends with a colon (:)</p>
    </gi>
    <gi>
      <title>lifetime</title>
      <p>Variables and objects have lifetimes &#x2014; they are created at some point during
                            program execution, and will be destroyed at some time. In python, objects
                            live as long as there is some variable pointing to it, or it is part of some
                            other compound object, like a list or a dictionary. In python, local variables
                            live only until the function finishes execution.</p>
    </gi>
    <gi>
      <title>local variable</title>
      <p>A variable defined inside a function. A local variable can only be used
                            inside its function. Parameters of a function are also a special kind
                            of local variable.</p>
    </gi>
    <gi>
      <title>method</title>
      <p>A special kind of function that is invoked on objects of particular types of
                            objects, using the syntax <c>&lt;expr&gt;.&lt;methodname&gt;(&lt;additional parameter values&gt;)</c></p>
    </gi>
    <gi>
      <title>None</title>
      <p>A special Python value. One use in Python is that it is returned
                            by functions that do not execute a return statement with a return argument.</p>
    </gi>
    <gi>
      <title>parameter</title>
      <p>A name used inside a function to refer to the value which was passed
                            to it as an argument.</p>
    </gi>
    <gi>
      <title>return value</title>
      <p>The value provided as the result of a function call.</p>
    </gi>
    <gi>
      <title>side effect</title>
      <p>Some lasting effect of a function call, other than its return value. Side effects include print statements, changes to mutable objects, and changes to the values of global variables.</p>
    </gi>
    <gi>
      <title>stack frame</title>
      <p>A frame that keeps track of the values of local variables during a function execution,
                            and where to return control when the function execution completes.</p>
    </gi>
    <gi>
      <title>type annotation</title>
      <p>An optional notation that specifies the type of a function parameter or function result.</p>
    </gi>
  </glossary>
</section>
