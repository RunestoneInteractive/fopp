<?xml version="1.0"?>
<section xml:id="functions_function-invocation">
  <title>Function Invocation</title>
  <p>Defining a new function does not make the function run.
            To execute the function, we need a <term>function call</term>. This is also known as a <term>function invocation</term>.</p>
  <note>
    <p>This section is a review of something we learned in the beginning of the textbook.</p>
  </note>
  <p>The way to invoke a function is to refer to it by name, followed by parentheses. Since there are no parameters for
            the function hello, we won't need to put anything inside the parentheses when we call it. Once we've defined a
            function, we can call it as often as we like and its statements will be executed each time we call it.</p>
  <program xml:id="clens11_2_1" interactive="codelens" language="python">
    <input>
def hello():
   print("Hello")
   print("Glad to meet you")

print(type(hello))
print(type("hello"))

hello()
print("Hey, that just printed two lines with one line of code!")
hello()  # do it again, just because we can...
    </input>
  </program>
  <p>Let's take a closer look at what happens when you define a function and when you execute the function.
            Try stepping through the code above.</p>
  <p>First, note that in Step 1, when it executes line 1, it does <em>not</em> execute lines 2 and 3. Instead, as you can see in
            blue <q>Global variables</q> area, it creates a variable named hello whose value is a python function object. In the
            diagram that object is labeled hello() with a notation above it that it is a function.</p>
  <p>At Step 2, the next line of code to execute is line 5. Just to emphasize that hello is a variable like any other, and
            that functions are python objects like any other, just of a particular type, line 5 prints out the type of the object
            referred to by the variable hello. It's type is officially &#x2018;function'.</p>
  <p>Line 6 is just there to remind you of the difference between referring to the
            variable name (function name) hello and referring to the string <q>hello</q>.</p>
  <p>At Step 4 we get to line 8, which has an invocation of the function. The way function invocation works is that the
            code block inside the function definition is executed in the usual way, but at the end, execution jumps to the point
            after the function invocation.</p>
  <p>You can see that by following the next few steps. At Step 5, the red arrow has moved to line 2, which will execute
            next. We say that <em>control has passed</em> from the top-level program to the function hello. After Steps 5 and 6 print out
            two lines, at Step 7, control will be passed back to the point after where the invocation was started. At Step 8, that
            has happened.</p>
  <p>The same process of invocation occurs again on line 10, with lines 2 and 3 getting executed a second time.</p>
  <note>
    <title>Common Mistake with Functions</title>
    <p>It is a common mistake for beginners to forget their parenthesis after the function name. This is particularly
                common in the case where there parameters are not required. Because the hello function defined above does not
                require parameters, it's easy to forget the parenthesis. This is less common, but still possible, when trying to
                call functions that require parameters.</p>
  </note>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question11_2_1">
    <statement>
      <p>What is a function in Python?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>A named sequence of statements.</p>
        </statement>
        <feedback>
          <p>Yes, a function is a named sequence of statements.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Any sequence of statements.</p>
        </statement>
        <feedback>
          <p>While functions contain sequences of statements, not all sequences of statements are considered functions.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A mathematical expression that calculates a value.</p>
        </statement>
        <feedback>
          <p>While some functions do calculate values, the python idea of a function is slightly different from the mathematical idea of a function in that not all functions calculate values.  Consider, for example, the turtle functions in this section.   They made the turtle draw a specific shape, rather than calculating a value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A statement of the form x = 5 + 4.</p>
        </statement>
        <feedback>
          <p>This statement is called an assignment statement.  It assigns the value on the right (9), to the name on the left (x).</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question11_2_2">
    <statement>
      <p>What is one main purpose of a function?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>To improve the speed of execution</p>
        </statement>
        <feedback>
          <p>Functions have little effect on how fast the program runs.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>To help the programmer organize programs into chunks that match how they think about the solution to the problem.</p>
        </statement>
        <feedback>
          <p>While functions are not required, they help the programmer better think about the solution by organizing pieces of the solution into logical chunks that can be reused.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>All Python programs must be written using functions</p>
        </statement>
        <feedback>
          <p>In the first several chapters, you have seen many examples of Python programs written without the use of functions.  While writing and using functions is desirable and essential for good programming style as your programs get longer, it is not required.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>To calculate values.</p>
        </statement>
        <feedback>
          <p>Not all functions calculate values.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question11_2_3">
    <statement>
      <p>How many lines will be output by executing this code?</p>
      <program language="python">
        <input>
def hello():
   print("Hello")
   print("Glad to meet you")
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>The code only defines the function. Nothing prints until the function is called.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Check again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>When the function is invoked, it will print two lines, but it has only been defined, not invoked.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question11_2_4">
    <statement>
      <p>How many lines will be output by executing this code?</p>
      <program language="python">
        <input>
def hello():
   print("Hello")
   print("Glad to meet you")

hello()
print("It works")
hello()
hello()
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>Here the the function is invoked and there is also a separate print statement.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>There is only one print statement outside the funciton, but the invocations of hello also cause lines to print.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>There are three print statements, but the function is invoked more than once.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Each time the function is invoked, it will print two lines, not one.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>7</p>
        </statement>
        <feedback>
          <p>Three invocations generate two lines each, plus the line "It works".</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
