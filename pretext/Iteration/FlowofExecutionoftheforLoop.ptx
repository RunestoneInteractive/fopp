<?xml version="1.0"?>
<section xml:id="iteration_flow-of-execution-of-the-for-loop137_index-0">
  <title>Flow of Execution of the for Loop</title>
  <p>As a program executes, the interpreter always keeps track of which statement is
            about to be executed.  We call this the <term>control flow</term>, or the <term>flow of
                execution</term> of the program.  When humans execute programs, they often use their
            finger to point to each statement in turn.  So you could think of control flow
            as <q>Python's moving finger</q>.</p>
  <p>Control flow until now has been strictly top to bottom, one statement at a
            time.  We call this type of control <term>sequential</term>.
            Sequential flow of control is always assumed to be the default behavior for a computer program.
            The <c>for</c> statement changes this.</p>
  <p>Flow of control is often easy to visualize and understand if we draw a flowchart.
            This flowchart shows the exact steps and logic of how the <c>for</c> statement executes.</p>
  <image source="Iteration/Figures/new_flowchart_for.png" width="300px%"/>
  <note>
    <p>Not sure what a flowchart is? Check out this funny take on it, in <url href="http://xkcd.com/518/" visual="http://xkcd.com/518/">XKCD</url>. <url href="http://xkcd.com/1195/" visual="http://xkcd.com/1195/">And this one</url>.</p>
  </note>
  <p>A codelens demonstration is a good way to help you visualize exactly how the flow of control
            works with the for loop.  Try stepping forward and backward through the program by pressing
            the buttons.  You can see the value of <c>name</c> change as the loop iterates through the list of
            friends.</p>
  <program xml:id="vtest" interactive="codelens" language="python">
    <input>
for name in ["Joe", "Amy", "Brad", "Angelina", "Zuki", "Thandi", "Paris"]:
    print("Hi ", name, "  Please come to my party on Saturday!")
    </input>
  </program>
  <p>While loops may not seem to be necessary when you're iterating over a few items, it is extremely helpful when
            iterating over lots of items. Imagine if you needed to change what happened in the code block. On the left, when you use
            iteration, this is easy. On the right, when you have hard coded the process, this is more difficult.</p>
  <image source="Iteration/Figures/iteration_vs_hardcoding.png" width="50%" alt="Demonstration of using iteration over hard coding the iteration."/>
</section>
