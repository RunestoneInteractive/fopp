<?xml version="1.0"?>
<section xml:id="classes_testing-classes">
  <title>Testing classes</title>
  <note>
    <p>This page depends on the use of the test module, which is introduced in <xref ref="test-cases_intro--test-cases"/>. If you haven't covered that chapter yet, you will want to delay reading this page until you do.</p>
  </note>
  <p>To test a user-defined class, you will create test cases that check whether instances are created properly, and you will
            create test cases for each of the methods as functions, by invoking them on particular instances and seeing whether they
            produce the correct return values and side effects, especially side effects that change data stored in the instance
            variables. To illustrate, we will use the Point class that was used in the introduction to classes.</p>
  <p>To test whether the class constructor (the <c>__init__</c>) method is working correctly, create an instance and then make
            tests to see whether its instance variables are set correctly. Note that this is a side effect test: the constructor
            method's job is to set instance variables, which is a side effect. Its return value doesn't matter.</p>
  <p>A method like <c>distanceFromOrigin</c> in the <c>Point</c> class you saw does its work by computing a return value, so it
            needs to be tested with a return value test. A method like <c>move</c> in the <c>Turtle</c> class does its work by changing the
            contents of a mutable object (the point instance has its instance variable changed) so it needs to be tested with a side
            effect test.</p>
  <p>Try adding some more tests in the code below, once you understand what's there.</p>
  <program xml:id="ac19_3_1" interactive="activecode" language="python">
    <input>
class Point:
    """ Point class for representing and manipulating x,y coordinates. """

    def __init__(self, initX, initY):

        self.x = initX
        self.y = initY

    def distanceFromOrigin(self):
        return ((self.x ** 2) + (self.y ** 2)) ** 0.5

    def move(self, dx, dy):
        self.x = self.x + dx
        self.y = self.y + dy


#testing class constructor (__init__ method)
p = Point(3, 4)
assert p.y == 4
assert p.x == 3

#testing the distance method
p = Point(3, 4)
assert p.distanceFromOrigin() == 5.0

#testing the move method
p = Point(3, 4)
p.move(-2, 3)
assert p.x == 1
assert p.y == 7
        </input>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question19_3_1">
    <statement>
      <p>For each function, you should create exactly one test case.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>Each test case checks whether the function works correctly on one input. It's a good idea to check several different inputs, including some extreme cases.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>It's a good idea to check some extreme cases, as well as the typical cases.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question19_3_2">
    <statement>
      <p>To test a method that changes the value of an instance variable, which kind of test case should you write?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>return value test</p>
        </statement>
        <feedback>
          <p>The method may return the correct value but not properly change the values of instance variables. See the move method of the Point class above.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>side effect test</p>
        </statement>
        <feedback>
          <p>The move method of the Point class above is a good example.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question19_3_3">
    <statement>
      <p>To test the function maxabs, which kind of test case should you write?</p>
      <program language="python">
        <input>
def maxabs(L):
   """L should be a list of numbers (ints or floats). The return value should be the maximum absolute value of the numbers in L."""
   return max(L, key=abs)
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>return value test</p>
        </statement>
        <feedback>
          <p>You want to check if maxabs returns the correct value for some input.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>side effect test</p>
        </statement>
        <feedback>
          <p>The function has no side effects; even though it takes a list L as a parameter, it doesn't alter its contents.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question19_3_4">
    <statement>
      <p>We have usually used the <c>sorted</c> function, which takes a list as input and returns a new list containing the same items, possibly in a different order. There is also a method called <c>sort</c> for lists (e.g. <c>[1,6,2,4].sort()</c>). It changes the order of the items in the list itself, and it returns the value <c>None</c>. Which kind of test case would you use on the sort method?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>return value test</p>
        </statement>
        <feedback>
          <p>The sort method always returns None, so there's nothing to check about whether it is returning the right value.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>side effect test</p>
        </statement>
        <feedback>
          <p>You want to check whether it has the correct side effect, whether it correctly mutates the list.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
