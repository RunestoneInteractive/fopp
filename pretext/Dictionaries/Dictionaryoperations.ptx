<?xml version="1.0"?>
<section xml:id="dictionaries_dictionary-operations70_index-0">
  <title>Dictionary operations</title>
  <p>The <c>del</c> statement removes a key-value pair from a dictionary. For example, the following dictionary contains the
            names of various fruits and the number of each fruit in stock. If someone buys all of the pears, we can remove the
            entry from the dictionary.</p>
  <program xml:id="clens10_2_1" interactive="codelens" language="python">
    <input>
inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}

del inventory['pears']
    </input>
  </program>
  <p>Dictionaries are mutable, as the delete operation above indicates. As we've seen before with lists, this means that the
            dictionary can be modified by referencing an association on the left hand side of the assignment statement. In the
            previous example, instead of deleting the entry for <c>pears</c>, we could have set the inventory to <c>0</c>.</p>
  <program xml:id="clens10_2_2" interactive="codelens" language="python">
    <input>
inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}

inventory['pears'] = 0
    </input>
  </program>
  <note>
    <p>Setting the value associated with <c>pears</c> to 0 has a different effect than removing the key-value pair entirely
                with <c>del</c>. Try printout out the two dictionaries in the examples above.</p>
  </note>
  <p>Similarily, a new shipment of 200 bananas arriving could be handled like this. Notice that there are now 512 bananas&#x2014;
            the dictionary has been modified. Note also that the <c>len</c> function also works on dictionaries. It returns the number
            of key-value pairs.</p>
  <program xml:id="clens10_2_3" interactive="codelens" language="python">
    <input>
inventory = {'apples': 430, 'bananas': 312, 'oranges': 525, 'pears': 217}
inventory['bananas'] = inventory['bananas'] + 200

numItems = len(inventory)
    </input>
  </program>
  <p>Notice that there are now 512 bananas&#x2014;the dictionary has been modified. Note also that the <c>len</c> function also
            works on dictionaries. It returns the number of key-value pairs.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question10_2_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
mydict = {"cat":12, "dog":6, "elephant":23}
mydict["mouse"] = mydict["cat"] + mydict["dog"]
print(mydict["mouse"])
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>12</p>
        </statement>
        <feedback>
          <p>12 is associated with the key cat.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>The key mouse will be associated with the sum of the two values.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>18</p>
        </statement>
        <feedback>
          <p>Yes, add the value for cat and the value for dog (12 + 6) and create a new entry for mouse.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, there is no entry with mouse as the key.</p>
        </statement>
        <feedback>
          <p>Since the new key is introduced on the left hand side of the assignment statement, a new key-value pair is added to the dictionary.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="ac10_2_1">
    <statement>
      <p><term>2.</term> Update the value for <q>Phelps</q> in the dictionary <c>swimmers</c> to include his medals from the Rio Olympics by adding 5 to the current value (Phelps will now have 28 total medals). Do not rewrite the dictionary.</p>
    </statement>
    <program xml:id="ac10_2_1_editor" interactive="activecode" language="python">
      <input>
swimmers = {'Manuel':4, 'Lochte':12, 'Adrian':7, 'Ledecky':5, 'Dirado':4, 'Phelps':23}

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testThree(self):
      self.assertEqual(sorted(swimmers.items()), sorted([('Adrian', 7), ('Dirado', 4), ('Ledecky', 5), ('Lochte', 12), ('Phelps', 28), ('Manuel',4)]), "Testing that swimmers is assigned to correct values.")

myTests().main()
        </input>
    </program>
  </exercise>
</section>
