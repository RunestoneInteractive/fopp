<?xml version="1.0"?>
<section xml:id="transforming-sequences_aliasing">
  <title>Aliasing</title>
  <p>Since variables refer to objects, if we assign one variable to another, both
            variables refer to the same object:</p>
  <program xml:id="ac8_4_1" interactive="activecode" language="python">
    <input>
a = [81, 82, 83]
b = a
print(a is b)
        </input>
  </program>
  <p>In this case, the reference diagram looks like this:</p>
  <image source="TransformingSequences/Figures/refdiag4.png" width="50%" alt="State snapshot for multiple references (aliases) to a list"/>
  <p>Because the same list has two different names, <c>a</c> and <c>b</c>, we say that it
            is <term>aliased</term>. Changes made with one alias affect the other.  In the codelens example below, you can see that <c>a</c> and <c>b</c> refer
            to the same list after executing the assignment statement <c>b = a</c>.</p>
  <program xml:id="ac8_4_2" interactive="activecode" language="python">
    <input>
a = [81,82,83]
b = [81,82,83]
print(a is b)

b = a
print(a == b)
print(a is b)

b[0] = 5
print(a)
        </input>
  </program>
  <p>Although this behavior can be useful, it is sometimes unexpected or
            undesirable. In general, it is safer to avoid aliasing when you are working
            with mutable objects. Of course, for immutable objects, there's no problem.
            That's why Python is free to alias strings and integers when it sees an opportunity to
            economize.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question8_1_3">
    <statement>
      <p>What is the value of y after the following code has been evaluated:</p>
      <program language="python">
        <input>
w = ['Jamboree', 'get-together', 'party']
y = ['celebration']
y = w
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>['Jamboree', 'get-together', 'party']</p>
        </statement>
        <feedback>
          <p>Yes, the value of y has been reassigned to the value of w.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['celebration']</p>
        </statement>
        <feedback>
          <p>No, that was the inital value of y, but y has changed.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['celebration', 'Jamboree', 'get-together', 'party']</p>
        </statement>
        <feedback>
          <p>No, when we assign a list to another list it does not concatenate the lists together.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>['Jamboree', 'get-together', 'party', 'celebration']</p>
        </statement>
        <feedback>
          <p>No, when we assign a list to another list it does not concatenate the lists together.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question8_4_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4,2,8,6,5]
blist = alist
blist[3] = 999
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4,2,8,6,5]</p>
        </statement>
        <feedback>
          <p>blist is not a copy of alist, it is a reference to the list alist refers to.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[4,2,8,999,5]</p>
        </statement>
        <feedback>
          <p>Yes, since alist and blist both reference the same list, changes to one also change the other.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
