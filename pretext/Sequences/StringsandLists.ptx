<?xml version="1.0"?>
<section xml:id="sequences_strings-lists-and-tuples">
  <title>Strings, Lists, and Tuples</title>
  <p>Throughout the first chapters of this book we have used strings to represent words or phrases that we
            wanted to print out. Our definition was simple: a string is simply some characters inside quotes.
            In this chapter we explore strings in much more detail.</p>
  <p>Additionally, we explore lists and tuples, which are very much like strings but can hold different types.</p>
  <subsection xml:id="sequences_strings">
    <title>Strings</title>
    <video xml:id="stringintro" youtube="T435lvYXE_w" width="auto"/>
    <p>Strings can be defined as sequential collections of characters.  This means that the individual
                characters that make up a string are in a particular order from left to right.</p>
    <p>A string that contains no characters, often referred to as the <term>empty string</term>, is still considered
                to be a string. It is simply a sequence of zero characters and is represented by &#x2018;' or <q/> (two single
                or two double quotes with nothing in between).</p>
  </subsection>
  <subsection xml:id="sequences_lists">
    <title>Lists</title>
    <video xml:id="listintro" youtube="mrwSbE5MDn0" width="auto"/>
    <p>A <term>list</term> is a sequential collection of Python data values, where each value is identified by an
                index. The values that make up a list are called its <term>elements</term>. Lists are similar to strings, which
                are ordered collections of characters, except that the elements of a list can have any type and for
                any one list, the items can be of different types.</p>
    <p>There are several ways to create a new list.  The simplest is to enclose the
                elements in square brackets ( <c>[</c> and <c>]</c>).</p>
    <program language="python">
      <input>
[10, 20, 30, 40]
["spam", "bungee", "swallow"]
</input>
    </program>
    <p>The first example is a list of four integers. The second is a list of three
                strings. As we said above, the elements of a list don't have to be the same type.  The following
                list contains a string, a float, an integer, and
                another list.</p>
    <program language="python">
      <input>
["hello", 2.0, 5, [10, 20]]
</input>
    </program>
    <note>
      <p>WP: Don't Mix Types!</p>
      <p>You'll likely see us do this in the textbook to give you odd combinations, but when you create lists you
                    should generally not mix types together. A list of just strings or just integers or just floats is generally
                    easier to deal with.</p>
    </note>
  </subsection>
  <subsection xml:id="sequences_tuples">
    <title>Tuples</title>
    <p>A <term>tuple</term>, like a list, is a sequence of items of any type. The printed representation of a tuple is a comma-separated
                sequence of values, enclosed in parentheses. In other words, the representation is just like lists, except with
                parentheses () instead of square brackets [].</p>
    <p>One way to create a tuple is to write an expression, enclosed in parentheses,
                that consists of multiple other expressions, separated by commas.</p>
    <program language="python">
      <input>
julia = ("Julia", "Roberts", 1967, "Duplicity", 2009, "Actress", "Atlanta, Georgia")
</input>
    </program>
    <p>The key difference between lists and tuples is that a tuple is immutable, meaning that its contents can't be changed after the tuple is
                created. We will examine the mutability of lists in detail in the chapter on <xref ref="transforming-sequences_mutability"/>.</p>
    <p>To create a tuple with a single element (but you're probably not likely to do that too often), we have to include the
                final comma, because without the final comma, Python treats the <c>(5)</c> below as an integer in parentheses:</p>
    <program xml:id="ac5_2_1" interactive="activecode" language="python">
      <input>
t = (5,)
print(type(t))

x = (5)
print(type(x))
        </input>
    </program>
    <p>
      <term>Check your understanding</term>
    </p>
    <exercise label="question5_2_1">
      <statement>
        <p>A list is only allowed to contain integer items.</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>False</p>
          </statement>
          <feedback>
            <p>Yes, unlike strings, lists can consist of any type of Python data.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>True</p>
          </statement>
          <feedback>
            <p>Lists are heterogeneous, meaning they can have different types of data.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </subsection>
</section>
