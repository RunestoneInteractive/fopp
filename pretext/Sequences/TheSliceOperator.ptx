<?xml version="1.0"?>
<section xml:id="sequences_the-slice-operator210_index-0">
  <title>The Slice Operator</title>
  <p>A substring of a string is called a <term>slice</term>. Selecting a slice is similar to
            selecting a character:</p>
  <program xml:id="ac5_6_1" interactive="activecode" language="python">
    <input>
singers = "Peter, Paul, and Mary"
print(singers[0:5])
print(singers[7:11])
print(singers[17:21])
        </input>
  </program>
  <p>The <c>slice</c> operator <c>[n:m]</c> returns the part of the string starting
            with the character at index n and
            go up to but <em>not including</em> the character at index m.
            Or with normal counting from 1, this is the (n+1)st character up to and including the mth character.</p>
  <p>If you omit the first index (before the colon), the slice starts at the
            beginning of the string. If you omit the second index, the slice goes to the
            end of the string.</p>
  <program xml:id="ac5_6_2" interactive="activecode" language="python">
    <input>
fruit = "banana"
print(fruit[:3])
print(fruit[3:])
        </input>
  </program>
  <p>What do you think <c>fruit[:]</c> means?</p>
  <subsection xml:id="sequences_list-slices">
    <title>List Slices</title>
    <p>The slice operation we saw with strings also work on lists.  Remember that the first index is the starting point for the slice and the second number is one index past the end of the slice (up to but not including that element).  Recall also
                that if you omit the first index (before the colon), the slice starts at the
                beginning of the sequence. If you omit the second index, the slice goes to the
                end of the sequence.</p>
    <program xml:id="ac5_6_3" interactive="activecode" language="python">
      <input>
a_list = ['a', 'b', 'c', 'd', 'e', 'f']
print(a_list[1:3])
print(a_list[:4])
print(a_list[3:])
print(a_list[:])
        </input>
    </program>
  </subsection>
  <subsection xml:id="sequences_tuple-slices">
    <title>Tuple Slices</title>
    <p>We can't modify the elements of a tuple, but we can make a variable reference a new tuple holding different information.
                Thankfully we can also use the slice operation on tuples as well as strings and lists. To construct the new tuple, we can
                slice parts of the old tuple and join up the bits to make the new tuple. So <c>julia</c> has a new recent film, and we might
                want to change her tuple. We can easily slice off the parts we want and concatenate them with the new tuple.</p>
    <program xml:id="ac5_6_4" interactive="activecode" language="python">
      <input>
julia = ("Julia", "Roberts", 1967, "Duplicity", 2009, "Actress", "Atlanta, Georgia")
print(julia[2])
print(julia[2:6])

print(len(julia))

julia = julia[:3] + ("Eat Pray Love", 2010) + julia[5:]
print(julia)
        </input>
    </program>
    <p>
      <term>Check your understanding</term>
    </p>
    <exercise label="question5_6_1">
      <statement>
        <p>What is printed by the following statements?</p>
        <program language="python">
          <input>
s = "python rocks"
print(s[3:8])
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>python</p>
          </statement>
          <feedback>
            <p>That would be s[0:6].</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>rocks</p>
          </statement>
          <feedback>
            <p>That would be s[7:].</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>hon r</p>
          </statement>
          <feedback>
            <p>Yes, start with the character at index 3 and go up to but not include the character at index 8.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>Error, you cannot have two numbers inside the [ ].</p>
          </statement>
          <feedback>
            <p>This is called slicing, not indexing. It requires a start and an end.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="question5_6_2">
      <statement>
        <p>What is printed by the following statements?</p>
        <program language="python">
          <input>
alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
print(alist[4:])
</input>
        </program>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>[ [ ], 3.14, False]</p>
          </statement>
          <feedback>
            <p>Yes, the slice starts at index 4 and goes up to and including the last item.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[ [ ], 3.14]</p>
          </statement>
          <feedback>
            <p>By leaving out the upper bound on the slice, we go up to and including the last item.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[ [56, 57, "dog"], [ ], 3.14, False]</p>
          </statement>
          <feedback>
            <p>Index values start at 0.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="question5_6_3">
      <statement>
        <p>What is printed by the following statements?</p>
        <program language="python">
          <input>
L = [0.34, '6', 'SI106', 'Python', -2]
print(len(L[1:-1]))
</input>
        </program>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>2</p>
          </statement>
          <feedback>
            <p>The list begins with the second item of L and includes everything up to but not including the last item.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>3</p>
          </statement>
          <feedback>
            <p>Yes, there are 3 items in this list.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>4</p>
          </statement>
          <feedback>
            <p>The list begins with the second item of L and includes everything up to but not including the last item.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>5</p>
          </statement>
          <feedback>
            <p>The list begins with the second item of L and includes everything up to but not including the last item.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="ac5_6_5">
      <statement>
        <p>Create a new list using the 9th through 12th elements (four items in all) of <c>new_lst</c> and assign it to the variable <c>sub_lst</c>.</p>
      </statement>
      <program xml:id="ac5_6_5_editor" interactive="activecode" language="python">
        <input>
new_lst = ["computer", "luxurious", "basket", "crime", 0, 2.49, "institution", "slice", "sun", ["water", "air", "fire", "earth"], "games", 2.7, "code", "java", ["birthday", "celebration", 1817, "party", "cake", 5], "rain", "thunderstorm", "top down"]

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(sub_lst, new_lst[8:12], "Testing that sub_lst has the correct elements assigned.")

myTests().main()
        </input>
      </program>
    </exercise>
  </subsection>
</section>
