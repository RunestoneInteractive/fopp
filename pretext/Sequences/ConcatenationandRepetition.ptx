<?xml version="1.0"?>
<section xml:id="sequences_concatenation-and-repetition202_index-0">
  <title>Concatenation and Repetition</title>
  <p>Again, as with strings, the <c>+</c> operator concatenates lists.
            Similarly, the <c>*</c> operator repeats the items in a list a given number of times.</p>
  <program xml:id="ac5_7_1" interactive="activecode" language="python">
    <input>
fruit = ["apple","orange","banana","cherry"]
print([1,2] + [3,4])
print(fruit+[6,7,8,9])

print([0] * 4)
        </input>
  </program>
  <p>It is important to see that these operators create new lists from the elements of the operand lists.
            If you concatenate a list with 2 items and a list with 4 items, you will get a new list with 6 items
            (not a list with two sublists).  Similarly, repetition of a list of 2 items 4 times will give a list
            with 8 items.</p>
  <p>One way for us to make this more clear is to run a part of this example in codelens.
            As you step through the code, you will see the variables being created and the lists that they refer to.
            Pay particular attention to the fact that when <c>newlist</c> is created by the statement
            <c>newlist = fruit + numlist</c>, it refers to a completely new list formed by making copies of the items from <c>fruit</c> and <c>numlist</c>.  You can see this very clearly in the codelens object diagram.  The objects are different.</p>
  <program xml:id="clens5_7_1" interactive="codelens" language="python">
    <input>
fruit = ["apple","orange","banana","cherry"]
numlist = [6,7]

newlist = fruit + numlist

zeros = [0] * 4
    </input>
  </program>
  <note>
    <p>WP: Adding types together</p>
    <p>Beware when adding different types together! Python doesn't understand how to concatenate different
                types together. Thus, if we try to add a string to a list with <c>['first'] + "second"</c> then the
                interpreter will return an error. To do this you'll need to make the two objects the same type. In this
                case, it means putting the string into its own list and then adding the two together like so:
                <c>['first'] + ["second"]</c>. This process will look different for other types though. Remember that there
                are functions to convert types!</p>
  </note>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question5_7_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [1,3,5]
blist = [2,4,6]
print(alist + blist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>6</p>
        </statement>
        <feedback>
          <p>Concatenation does not add the lengths of the lists.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[1,2,3,4,5,6]</p>
        </statement>
        <feedback>
          <p>Concatenation does not reorder the items.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[1,3,5,2,4,6]</p>
        </statement>
        <feedback>
          <p>Yes, a new list with all the items of the first list followed by all those from the second.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[3,7,11]</p>
        </statement>
        <feedback>
          <p>Concatenation does not add the individual items.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question5_7_2">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [1,3,5]
print(alist * 3)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>9</p>
        </statement>
        <feedback>
          <p>Repetition does not multiply the lengths of the lists.  It repeats the items.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[1,1,1,3,3,3,5,5,5]</p>
        </statement>
        <feedback>
          <p>Repetition does not repeat each item individually.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[1,3,5,1,3,5,1,3,5]</p>
        </statement>
        <feedback>
          <p>Yes, the items of the list are repeated 3 times, one after another.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>[3,9,15]</p>
        </statement>
        <feedback>
          <p>Repetition does not multiply the individual items.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
