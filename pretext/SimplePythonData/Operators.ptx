<?xml version="1.0"?>
<section xml:id="simple-python-data_operators-and-operands220_index-0">
  <title>Operators and Operands</title>
  <p>You can build complex expressions out of simpler ones using <term>operators</term>. Operators are special tokens that represent computations like addition,
            multiplication and division. The values the operator works on are called
            <term>operands</term>.</p>
  <p>The following are all legal Python expressions whose meaning is more or less
            clear:</p>
  <pre>20 + 32
5 ** 2
(5 + 9) * (15 - 7)</pre>
  <p>The tokens <c>+</c>, <c>-</c>, and <c>*</c>, and the use of parentheses for grouping,
            mean in Python what they mean in mathematics. The asterisk (<c>*</c>) is the
            token for multiplication, and <c>**</c> is the token for exponentiation.
            Addition, subtraction, multiplication, and exponentiation all do what you
            expect.</p>
  <p>Remember that if we want to see the results of the computation, the program needs to specify that with the word <c>print</c>. The first three computations occur, but their results are not printed out.</p>
  <program xml:id="ac2_3_1" interactive="activecode" language="python">
    <input>
20 + 32
5 ** 2
(5 + 9) * (15 - 7)
print(7 + 5)
        </input>
  </program>
  <p>In Python 3, which we will be using, the division operator <c>/</c> produces a floating point result (even if the result is an integer; <c>4/2</c> is <c>2.0</c>). If you want truncated division, which ignores the remainder, you can use the <c>//</c> operator (for example, <c>5//2</c> is <c>2</c>).</p>
  <program xml:id="ac2_3_2" interactive="activecode" language="python">
    <input>
print(9 / 5)
print(5 / 9)
print(9 // 5)
        </input>
  </program>
  <p>Pay particular attention to the examples above. Note that <c>9//5</c> truncates rather than rounding, so it produces the value 1 rather 2.</p>
  <p>The truncated division operator, <c>//</c>, also works on floating point numbers. It truncates to the nearest integer, but still produces a floating point result. Thus <c>7.0 // 3.0</c> is <c>2.0</c>.</p>
  <program xml:id="ac2_3_3" interactive="activecode" language="python">
    <input>
print(7.0 / 3.0)
print(7.0 // 3.0)
        </input>
  </program>
  <p xml:id="simple-python-data_index-1">The <term>modulus operator</term>, sometimes also called the <term>remainder operator</term> or <term>integer remainder operator</term> works on integers (and integer expressions) and yields
            the remainder when the first operand is divided by the second. In Python, the
            modulus operator is a percent sign (<c>%</c>). The syntax is the same as for other
            operators.</p>
  <program xml:id="ac2_3_4" interactive="activecode" language="python">
    <input>
print(7 // 3)    # This is the integer division operator
print(7 % 3)     # This is the remainder or modulus operator
        </input>
  </program>
  <p>In the above example, 7 divided by 3 is 2 when we use integer division and there is a remainder of 1.</p>
  <p>The modulus operator turns out to be surprisingly useful. For example, you can
            check whether one number is divisible by another&#x2014;if <c>x % y</c> is zero, then
            <c>x</c> is divisible by <c>y</c>.
            Also, you can extract the right-most digit or digits from a number.  For
            example, <c>x % 10</c> yields the right-most digit of <c>x</c> (in base 10).
            Similarly <c>x % 100</c> yields the last two digits.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question2_3_1">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 / 4)
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>4.5</p>
        </statement>
        <feedback>
          <p>Because the result is not an integer, a floating point answer is produced.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>Even if // were used, it would still truncate, not round</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Perhaps you are thinking of the integer division operator, //</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4.0</p>
        </statement>
        <feedback>
          <p>/ performs exact division, without truncation</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>/ does division. Perhaps you were thinking of %, which computes the remainder?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question2_3_2">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18.0 // 4)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.5</p>
        </statement>
        <feedback>
          <p>- // does truncated division.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>- Neither / nor // leads to rounding up</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>- Even though it truncates, it produces a floating point result</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4.0</p>
        </statement>
        <feedback>
          <p>- Yes, even though it truncates, it produces a floating point result because 18.0 is a float</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>- / does division. Perhaps you were thinking of %, which computes the remainder?</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question2_3_3">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 % 4)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback>
          <p>The % operator returns the remainder after division.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
          <p>The % operator returns the remainder after division.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>The % operator returns the remainder after division.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>The % operator returns the remainder after division.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
