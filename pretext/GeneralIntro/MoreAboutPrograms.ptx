<?xml version="1.0"?>
<section xml:id="general-intro_more-about-programs124_index-0">
  <title>More About Programs</title>
  <p>A <term>program</term> is a sequence of instructions that specifies how to perform a
            computation. The computation might be something as complex as rendering an html page in a web browser
            or encoding a video and streaming it across the network.  It can also be a
            symbolic computation, such as searching for and replacing text in a document or
            (strangely enough) compiling a program.</p>
  <p>The details look different in different languages, but a few basic instructions
            appear in just about every language.</p>
  <dl>
    <li>
      <title>input</title>
      <p>Get data from the keyboard, a file, or some other device.</p>
    </li>
    <li>
      <title>output</title>
      <p>Display data on the screen or send data to a file or other device.</p>
    </li>
    <li>
      <title>math and logic</title>
      <p>Perform basic mathematical operations like addition and multiplication
                        and logical operations like <c>and</c>, <c>or</c>, and <c>not</c>.</p>
    </li>
    <li>
      <title>conditional execution</title>
      <p>Check for certain conditions and execute the appropriate sequence of
                        statements.</p>
    </li>
    <li>
      <title>repetition</title>
      <p>Perform some action repeatedly, usually with some variation.</p>
    </li>
  </dl>
  <p>Believe it or not, that's pretty much all there is to it. Every program you've
            ever used, no matter how complicated, is made up of instructions that look more
            or less like these. Thus, we can describe programming as the process of
            breaking a large, complex task into smaller and smaller subtasks until the
            subtasks are simple enough to be performed with sequences of these basic
            instructions.</p>
  <subsection xml:id="general-intro_preview-of-control-structures">
    <title>Preview of Control Structures</title>
    <p>We won't get too much into python control structures yet, but it is good to mention them early to give you a taste for what you can do with the language!
                If these make sense to you now, that's great!
                However, we don't expect you to understand these yet - understanding will come later.</p>
    <p>First we have structures that allow us to iterate over something.
                We can look at strings character-by-character or lists item-by-item until we've reached the end of them by using something called a <c>for</c> loop.</p>
    <program xml:id="ac1_5_1" interactive="activecode" language="python">
      <input>
for character in "Cool string":
    print(character)
        </input>
    </program>
    <p>We can also iterate without a definite stopping point with <c>while</c> loops.
                You might use this if you want to receive input from the user of your program but you don't know how long it'll take for them to be done with your code.</p>
    <program xml:id="ac1_5_2" interactive="activecode" language="python">
      <input>
grocery_item = ""
while grocery_item != "done":
    grocery_item = input("Please write down an item to add to your grocery list. When you are done writing the list simply type: done")
    print(grocery_item)
        </input>
    </program>
    <p>Other structures will allow us to only run parts of our programs or only do some task if a certain set of conditions are found.
                Conditionals, as they're called, allow us to do that.
                Check out how adding conditionals to our code can change what we can write about regarding grocery shopping.</p>
    <program xml:id="ac1_5_3" interactive="activecode" language="python">
      <input>
grocery_item = ""
grocery_list = []
while grocery_item != "done":
    grocery_item = input("Please write down an item to add to your grocery list. When you are done writing the list then simply type: done")
    if grocery_item == 'done':
        continue
    else:
        print("adding the item to the list")
        grocery_list.append(grocery_item)
print("Here is our grocery list:")
print(grocery_list)
        </input>
    </program>
    <p>
      <term>Check your understanding</term>
    </p>
    <exercise label="question1_5_1">
      <statement>
        <p>A program is:</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>a sequence of instructions that specifies how to perform a computation.</p>
          </statement>
          <feedback>
            <p>It is just step-by-step instructions that the computer can understand and execute.  Programs often implement algorithms, but note that algorithms are typically less precise than programs and do not have to be written in a programming language.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>something you follow along at a play or concert.</p>
          </statement>
          <feedback>
            <p>True, but not in this context.  We mean a program as related to a computer.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>a computation, even a symbolic computation.</p>
          </statement>
          <feedback>
            <p>A program can perform a computation, but by itself it is not one.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>the same thing as an algorithm.</p>
          </statement>
          <feedback>
            <p>Programs often implement algorithms, but they are not the same thing.  An algorithm is a step by step list of instructions, but those instructions are not necessarily precise enough for a computer to follow.  A program must be written in a programming language that the computer knows how to interpret.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </subsection>
</section>
